/*
 * SatelliteDNA.org
 * 
 * 2017
 */
package org.satellitedna.ui;

import java.awt.Cursor;
import java.awt.HeadlessException;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import org.apache.commons.io.FileUtils;
import org.satellitedna.utils.Action;
import org.satellitedna.utils.Converter;
import org.satellitedna.utils.PropertyManager;
import org.satellitedna.utils.TransformException;
import org.satellitedna.utils.ZipUtil;

/**
 
 * @author clopez
 */
public class CocooxFrameDialog extends javax.swing.JFrame {

    private static final long serialVersionUID = 1L;
    private final GetOptionDialog fileDialog;
    private PropertyManager propertyManager;

    private Converter converter;

    private static final Logger LOG = Logger.getLogger(CocooxFrameDialog.class.getName());

    /**
     * Creates new form NewJFrame
     */
    public CocooxFrameDialog() {
        initComponents();
        fileDialog = new GetOptionDialog(this, true);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextFieldCocoxProject = new javax.swing.JTextField();
        jButtonOpenCoocoxProject = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jButtonEditCompilerOptions = new javax.swing.JButton();
        jButtonProjectDestination = new javax.swing.JButton();
        jButtonReviewMakeFile = new javax.swing.JButton();
        jButtonGenerate = new javax.swing.JButton();
        jButtonSaveAndClose = new javax.swing.JButton();
        jButtonCancel = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jCheckBoxCopyAllfiles = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Coocox To Makefile");
        setAlwaysOnTop(true);
        setResizable(false);

        jLabel1.setText("Cocox Project Location");

        jTextFieldCocoxProject.setText(" ");

        jButtonOpenCoocoxProject.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/satellitedna/ui/Untitled.png"))); // NOI18N
        jButtonOpenCoocoxProject.setText("...");
        jButtonOpenCoocoxProject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonOpenCoocoxProjectMouseClicked(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel2.setText("Project Options");

        jButtonEditCompilerOptions.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/satellitedna/ui/code-function.png"))); // NOI18N
        jButtonEditCompilerOptions.setText(" Compiler Options");
        jButtonEditCompilerOptions.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonEditCompilerOptionsMouseClicked(evt);
            }
        });

        jButtonProjectDestination.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/satellitedna/ui/folder-open.png"))); // NOI18N
        jButtonProjectDestination.setText("Project Destination");
        jButtonProjectDestination.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonProjectDestinationMouseClicked(evt);
            }
        });

        jButtonReviewMakeFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/satellitedna/ui/applications-utilities.png"))); // NOI18N
        jButtonReviewMakeFile.setText("Review Project");
        jButtonReviewMakeFile.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonReviewMakeFileMouseClicked(evt);
            }
        });

        jButtonGenerate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/satellitedna/ui/flag.png"))); // NOI18N
        jButtonGenerate.setText("Generate");
        jButtonGenerate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonGenerateMouseClicked(evt);
            }
        });

        jButtonSaveAndClose.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/satellitedna/ui/dialog-ok-2.png"))); // NOI18N
        jButtonSaveAndClose.setText("Save Project Options and Close");
        jButtonSaveAndClose.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonSaveAndCloseMouseClicked(evt);
            }
        });

        jButtonCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/satellitedna/ui/dialog-cancel-4.png"))); // NOI18N
        jButtonCancel.setText("Cancel And Close");
        jButtonCancel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonCancelMouseClicked(evt);
            }
        });

        jCheckBoxCopyAllfiles.setText("Copy All Files To new Location");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldCocoxProject, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonOpenCoocoxProject)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButtonEditCompilerOptions, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonProjectDestination, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonReviewMakeFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonGenerate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBoxCopyAllfiles)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(176, 176, 176)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(124, 124, 124)
                        .addComponent(jButtonSaveAndClose)
                        .addGap(71, 71, 71)
                        .addComponent(jButtonCancel)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextFieldCocoxProject, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonOpenCoocoxProject)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonEditCompilerOptions)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonProjectDestination)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonReviewMakeFile)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonGenerate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBoxCopyAllfiles))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonSaveAndClose)
                    .addComponent(jButtonCancel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonOpenCoocoxProjectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonOpenCoocoxProjectMouseClicked

        FileDialogN fileDialogN = new FileDialogN();
        //project.pbxproj
        FileNamingFilter filter = new FileNamingFilter("pbxproj", "Coocox Project");

        propertyManager = new PropertyManager();
        propertyManager.loadFromClassLoader();
        String oldLocation = propertyManager.getProperty(CompilerFlags.COOCOX_BASE_LOCATION.name());

        String location = fileDialogN.getFile(filter, oldLocation, false, false);

        if (location != null) {

            File f = new File(location);
            if (f.canRead() == false || f.isDirectory()) {
                JOptionPane.showMessageDialog(this,
                        "error file " + location + " is invalid");
                return;
            }

            jTextFieldCocoxProject.setText(location);
            converter = new Converter(propertyManager);

            ProcessCoocoxProject p = new ProcessCoocoxProject();
            p.setCoocoxProjectLocation(location);
            Thread t = new Thread(p);
            t.start();
            try {
                t.join();
            } catch (java.lang.InterruptedException e) {
                LOG.log(Level.SEVERE, e.toString());
                JOptionPane.showMessageDialog(this,
                        "error " + e.getMessage());
            }
            String coocoX = p.getCoocoxLocation();
            if (coocoX != null) {
                try {
                    propertyManager.setProperty(CompilerFlags.COOCOX_BASE_LOCATION.name(), location);

                    String fileName = ZipUtil.formatPath(location, coocoX);

                    propertyManager.setProperty(CompilerFlags.COOCOX_RESOURCES.name(), fileName);

                    fileName += "/build.xml";

                    // C:/projects/arm_projects/updated_lpc1768/strtok1.c	/home/projects/arm_projects/updated_lpc1768/strtok1.c
                    //                ZipUtil.fixPath(fileName)
                    String tmp = location.substring(0, location.lastIndexOf("/"));
                    tmp = tmp.substring(0, tmp.lastIndexOf("/"));
                    tmp = tmp.substring(0, tmp.lastIndexOf("/"));
                    propertyManager.setProperty(CompilerFlags.COOCOX_BASE_FILTERED.name(), tmp);
                    propertyManager.saveToClassLoader();
                    converter.process(fileName);

                    StringBuilder buffer = new StringBuilder(4000);

                    ArrayList<String> list = converter.getVariablesList("compile", "compilerarg");

                    this.jTextArea1.append("Found Compiler Options\n");
                    buffer.delete(0, buffer.length());

                    for (int count = 0; count < list.size(); count++) {
                        String n = list.get(count);

                        buffer.append(n);
                        if (count + 1 < list.size()) {
                            buffer.append(" ");
                        }

                    }
                    propertyManager.setProperty(CompilerFlags.CFLAGS.name(), buffer.toString());

                    this.jTextArea1.append("Found Linker Options\n");
                    buffer.delete(0, buffer.length());

                    list = converter.getVariablesList("compile", "linkerarg");
                    for (int count = 0; count < list.size(); count++) {
                        String n = list.get(count);

                        buffer.append(n);
                        if (count + 1 < list.size()) {
                            buffer.append(" ");
                        }

                    }
                    propertyManager.setProperty(CompilerFlags.LFLAGS.name(), buffer.toString());

                    this.jTextArea1.append("Found Includes\n");
                    buffer.delete(0, buffer.length());
                    list = converter.getVariablesList("compile", "includepath");
                    for (int count = 0; count < list.size(); count++) {
                        String n = list.get(count);
                        buffer.append("-I");
                        buffer.append(n);
                        if (count + 1 < list.size()) {
                            buffer.append(" ");
                        }

                    }
                    propertyManager.setProperty(CompilerFlags.INCPATH.name(), buffer.toString());

                    propertyManager.saveToClassLoader();

                } catch (Exception e) {
                    LOG.log(Level.SEVERE, e.toString());
                    JOptionPane.showMessageDialog(this,
                            "error " + e.getMessage());
                }
            }

        }


    }//GEN-LAST:event_jButtonOpenCoocoxProjectMouseClicked

    private void jButtonEditCompilerOptionsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonEditCompilerOptionsMouseClicked

        if (propertyManager == null) {
            JOptionPane.showMessageDialog(this,
                    "Please select the Coocox Project location first");
            return;
        }
        CompilerOptions options = new CompilerOptions(propertyManager);
        options.setVisible(true);

    }//GEN-LAST:event_jButtonEditCompilerOptionsMouseClicked

    private void jButtonProjectDestinationMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonProjectDestinationMouseClicked

        if (propertyManager == null) {
            JOptionPane.showMessageDialog(this,
                    "Please select the Coocox Project location first");
            return;
        }

        String projectLocation = propertyManager.getProperty(CompilerFlags.PROJECT_LOCATION.name());
        fileDialog.initialize("Project Location", projectLocation, false);
        fileDialog.setVisible(true);
        if (fileDialog.wasCancelled() == false) {

            propertyManager.setProperty(CompilerFlags.PROJECT_LOCATION.name(), fileDialog.getSelected());
            propertyManager.saveToClassLoader();
        }
    }//GEN-LAST:event_jButtonProjectDestinationMouseClicked

    private void jButtonCancelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonCancelMouseClicked
        this.dispose();


    }//GEN-LAST:event_jButtonCancelMouseClicked

    private void jButtonSaveAndCloseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonSaveAndCloseMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonSaveAndCloseMouseClicked

    private void jButtonReviewMakeFileMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonReviewMakeFileMouseClicked
        // TODO add your handling code here:
        boolean process = false;

        if (propertyManager == null) {
            JOptionPane.showMessageDialog(this,
                    "Please select the Coocox Project location first");
            return;
        }

        ArrayList<String> makeFile = null;
        try {

            String bs = propertyManager.getProperty(CompilerFlags.COMPILER_BASE.name());
            if (bs != null) {
                if (converter.variableExists("gcc.home") == false) {
                    Action a = new Action(bs, "gcc.home");
                    a.addAction(new Action(bs, bs));
                    converter.addExternalVariable(a);

                }
            }
            String projectLocation = propertyManager.getProperty(CompilerFlags.PROJECT_LOCATION.name());

            makeFile = this.converter.createMakeFileFromBuildxml(
                    projectLocation);
            process = true;

        } catch (TransformException e) {
            LOG.log(Level.SEVERE, e.toString());
            JOptionPane.showMessageDialog(this,
                    "error converting project " + e.getMessage());
        }
        if (process && makeFile != null) {
            ReviewDialog dialog = new ReviewDialog(this, true);

            for (int count = 0; count < makeFile.size(); count++) {
                dialog.addLine(makeFile.get(count));
            }
            dialog.setVisible(true);
        }
    }//GEN-LAST:event_jButtonReviewMakeFileMouseClicked

    /**
     *
     * @param evt
     */

    private void jButtonGenerateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonGenerateMouseClicked
        boolean process = false;

        if (propertyManager == null) {
            JOptionPane.showMessageDialog(this,
                    "Please select the Coocox Project location first");
            return;
        }

        ArrayList<String> makeFile = null;
        try {

            String bs = propertyManager.getProperty(CompilerFlags.COMPILER_BASE.name());
            if (bs != null) {
                if (converter.variableExists("gcc.home") == false) {
                    Action a = new Action(bs, "gcc.home");
                    a.addAction(new Action(bs, bs));
                    converter.addExternalVariable(a);

                }
            } else {

                JOptionPane.showMessageDialog(this,
                        "Please set the compiler base first");
                return;

            }
            String projectLocation = propertyManager.getProperty(CompilerFlags.PROJECT_LOCATION.name());
            if (projectLocation == null) {

                JOptionPane.showMessageDialog(this,
                        "Please set the project location first");
                return;
            }
            if (propertyManager.containsKey(CompilerFlags.CCX.name()) == false)
            {
                  JOptionPane.showMessageDialog(this,
                        "Please set the CXX  first");
                return;
            }
            

            makeFile = this.converter.createMakeFileFromBuildxml(
                    projectLocation);
            process = true;

        } catch (TransformException e) {
            LOG.log(Level.SEVERE, e.toString());
            JOptionPane.showMessageDialog(this,
                    "error converting project " + e.getMessage());

        }

        if (process && makeFile != null) {

            this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            try {
                String projectLocation = propertyManager.getProperty(CompilerFlags.PROJECT_LOCATION.name());
                String oldLocation = propertyManager.getProperty(CompilerFlags.COOCOX_BASE_LOCATION.name());

                this.jTextArea1.append("Copy headers in progress\n");
                this.jTextArea1.append("Copy Source files in progress\n");
                int p = oldLocation.lastIndexOf("/");
                if (p != -1) {
                    oldLocation = oldLocation.substring(0, p);

                    p = oldLocation.lastIndexOf("/");
                    if (p != -1) {
                        oldLocation = oldLocation.substring(0, p);
                    }
                    p = oldLocation.lastIndexOf("/");
                    if (p != -1) {
                        oldLocation = oldLocation.substring(0, p);
                    }
                }

                if (this.jCheckBoxCopyAllfiles.isSelected()) {

                    this.jTextArea1.append("copy files \n");
                    if (oldLocation.equalsIgnoreCase(projectLocation) == false) {
                        String coocoxResources = propertyManager.getProperty(CompilerFlags.COOCOX_RESOURCES.name()) + "/arm-gcc-link.ld";

                        File source = new File(coocoxResources);
                        File destination = new File(projectLocation + "/arm-gcc-link.ld");
                        FileUtils.copyFile(source, destination);

                        File srcDir = new File(oldLocation);
                        File destDir = new File(projectLocation);
                        FileUtils.copyDirectory(srcDir, destDir);
                    }
                }
                Iterator<String> its = makeFile.iterator();
                this.jTextArea1.append("generating Make file progress\n");

                File f = new File(projectLocation + "/Makefile");
                if (f.exists()) {
                    f.delete();
                }

                String separator = System.getProperty("line.separator");
                try (FileOutputStream out = new FileOutputStream(f)) {
                    while (its.hasNext()) {
                        String line = its.next();
                        out.write(line.getBytes());
                        out.write(separator.getBytes());

                    }

                }
                this.jTextArea1.append("Done generating Make file progress\n");

                JOptionPane.showMessageDialog(this,
                        "Done");

            } catch (HeadlessException | IOException e) {
                LOG.log(Level.SEVERE, e.toString());
                JOptionPane.showMessageDialog(this,
                        "error converting project " + e.getMessage());

            } finally {
                this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
            }

        }
    }//GEN-LAST:event_jButtonGenerateMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CocooxFrameDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new CocooxFrameDialog().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonEditCompilerOptions;
    private javax.swing.JButton jButtonGenerate;
    private javax.swing.JButton jButtonOpenCoocoxProject;
    private javax.swing.JButton jButtonProjectDestination;
    private javax.swing.JButton jButtonReviewMakeFile;
    private javax.swing.JButton jButtonSaveAndClose;
    private javax.swing.JCheckBox jCheckBoxCopyAllfiles;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextFieldCocoxProject;
    // End of variables declaration//GEN-END:variables
}
